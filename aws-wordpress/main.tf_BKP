provider "aws" {
  region = "us-east-2"
}

# Criando a VPC
resource "aws_vpc" "main" {
  cidr_block           = var.vpc_cidr_block
  enable_dns_support   = true
  enable_dns_hostnames = true
}

# Criando a Subnet 1 (Pública)
resource "aws_subnet" "main" {
  vpc_id                  = aws_vpc.main.id
  cidr_block              = var.subnet_cidr_block
  availability_zone       = "us-east-2a"
  map_public_ip_on_launch = true
}

# Criando o Internet Gateway (IGW)
resource "aws_internet_gateway" "main" {
  vpc_id = aws_vpc.main.id
}

# Criando a Tabela de Roteamento Pública
resource "aws_route_table" "public" {
  vpc_id = aws_vpc.main.id
}

# Adicionando a Rota para o Internet Gateway
resource "aws_route" "default_route" {
  route_table_id         = aws_route_table.public.id
  destination_cidr_block = "0.0.0.0/0"
  gateway_id             = aws_internet_gateway.main.id
}

# Associando a Tabela de Roteamento à Sub-rede Pública
resource "aws_route_table_association" "subnet_association" {
  subnet_id      = aws_subnet.main.id
  route_table_id = aws_route_table.public.id
}

# Security Group para EC2 (permitindo SSH e acesso ao Docker)
resource "aws_security_group" "wordpress_sg" {
  name        = "wordpress-sg"
  description = "Allow traffic to EC2 and Docker"
  vpc_id      = aws_vpc.main.id

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

# Instância EC2 com Docker e Docker Compose
resource "aws_instance" "docker_instance" {
  ami                    = var.ami_id
  instance_type          = "t2.micro"
  subnet_id              = aws_subnet.main.id
  vpc_security_group_ids = [aws_security_group.wordpress_sg.id]
  key_name               = var.key_name

  associate_public_ip_address = true  # Garantir IP público

  tags = {
    Name = "docker-instance"
  }

  user_data = <<-EOF
              #!/bin/bash
              # Atualizando os pacotes
              yum update -y

              # Instalando o Docker
              yum install -y docker

              # Iniciando e habilitando o Docker
              systemctl start docker
              systemctl enable docker

              # Instalando o Docker Compose
              curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" 
                            -o /usr/local/bin/docker-compose
              chmod +x /usr/local/bin/docker-compose

              # Garantindo que o Docker e Docker Compose estão funcionando corretamente
              docker --version
              docker-compose --version
              EOF
}

# Saída para o IP público da instância EC2
output "ec2_public_ip" {
  value = aws_instance.docker_instance.public_ip
}

